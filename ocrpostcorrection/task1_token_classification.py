# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_task1_token_classification.ipynb.

# %% auto 0
__all__ = ['bert_base_model_name', 'tokenizer', 'tokenize_and_align_labels', 'tokenize_and_align_labels_with_tokenizer']

# %% ../nbs/01_task1_token_classification.ipynb 2
from functools import partial

from transformers import AutoTokenizer

# %% ../nbs/01_task1_token_classification.ipynb 3
bert_base_model_name = 'bert-base-multilingual-cased'

tokenizer = AutoTokenizer.from_pretrained(bert_base_model_name)

# %% ../nbs/01_task1_token_classification.ipynb 4
def tokenize_and_align_labels_with_tokenizer(tokenizer, examples):
    # Source: https://huggingface.co/docs/transformers/custom_datasets#token-classification-with-wnut-emerging-entities
    tokenized_inputs = tokenizer(examples["tokens"], truncation=True, is_split_into_words=True)

    labels = []
    for i, label in enumerate(examples[f"tags"]):
        word_ids = tokenized_inputs.word_ids(batch_index=i)  # Map tokens to their respective word.
        previous_word_idx = None
        label_ids = []
        for word_idx in word_ids:                            # Set the special tokens to -100.
            if word_idx is None:
                label_ids.append(-100)
            elif word_idx != previous_word_idx:              # Only label the first token of a given word.
                label_ids.append(label[word_idx])

        labels.append(label_ids)

    tokenized_inputs["labels"] = labels

    return tokenized_inputs

# %% ../nbs/01_task1_token_classification.ipynb 5
tokenize_and_align_labels = partial(tokenize_and_align_labels_with_tokenizer, tokenizer)
